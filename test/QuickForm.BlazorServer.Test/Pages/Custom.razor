@page "/custom"

@using QuickForm.Components
@using QuickForm.Attributes
@using System.ComponentModel
@using System.ComponentModel.DataAnnotations

<PageTitle>Index</PageTitle>

<div class="text"></div>

<QuickForm TEntity="LoginCommand" @ref="@QuickForm" Model="Model" EditContext="EditContext" OnSubmit="@OnSubmit" FormClass="form w-50 mx-auto" novalidate>
    <DescriptionTemplate>
        <div class="fs-6 form-text text-muted">
            @context
        </div>
    </DescriptionTemplate>

    <ValidFeedbackTemplate>
        <div class="valid-feedback fw-bold">
            valid
        </div>
    </ValidFeedbackTemplate>

    <InValidFeedbackTemplate>
        <div class="invalid-feedback fw-bold">
            @context
        </div>
    </InValidFeedbackTemplate>

    <SubmitButtonTemplate>
        <button type="submit" class="btn btn-outline-success w-100">
            submit
        </button>
    </SubmitButtonTemplate>
</QuickForm>

@code {

    public QuickForm<LoginCommand> QuickForm { get; set; } = default!;

    public LoginCommand Model { get; set; } = new();

    public EditContext EditContext { get; set; } = default!;

    public class LoginCommand
    {
        [EditorClass("text-start mb-1 mb-md-3")]
        [LabelClass("mb-1 fw-bold text-info")]
        [InputClass("form-control")]
        [Description("We will never share your email with anyone else.")]
        [Required(ErrorMessage = "Email is required.")]
        [Placeholder("Enter your email.")]
        [DataType(DataType.EmailAddress)]
        public string Email { get; set; } = string.Empty;

        [EditorClass("text-start mb-1 mb-md-3")]
        [LabelClass("mb-1 fw-bold text-info")]
        [InputClass("form-control")]
        [Description("Enter your password.")]
        [Required(ErrorMessage = "Password is required.")]
        [Placeholder("Enter your password.")]
        [MinLength(3)]
        [MaxLength(16)]
        public string Password { get; set; } = string.Empty;
    }

    public void OnSubmit()
    {
        QuickForm.EditContext.Validate();
        StateHasChanged();
    }

}