@page "/full"

@using QuickForm.Components.Bootstrap
@using System.ComponentModel.DataAnnotations
@using System.ComponentModel.DataAnnotations.Schema
@using System.ComponentModel
@using QuickForm.Attributes

<datalist id="dates">
    <option label="Groundhog Day">2023-02-02</option>
    <option label="Valentine's Day">2023-02-14</option>
    <option label="Flag Day">2023-06-14</option>
</datalist>


<datalist id="items">
    @foreach (var item in ExampleModel.ItemChoices)
    {
        <option value="@item"></option>
    }
</datalist>

<BsQuickForm Model="Model" FormClass="form w-50 mx-auto p-5" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit"/>

@code {

    public ExampleModel Model { get; set; } = new();

    public enum Choices
    {
        [Display(Name = "bad")]
        ChoiceA,

        [Display(Name = "good")]
        ChoiceB,

        [Display(Name = "great")]
        ChoiceC,
    }

    public class ExampleModel
    {
        public static readonly IEnumerable<string> ItemChoices = new List<string> { "foo", "bar", "baz", "candy", "banshee" };

        [Required]
        public string RequiredWithNoMessage { get; set; } = "required";

        [Required(ErrorMessage = "Thid field is required")]
        public string RequiredWithMessage { get; set; } = "required";

        public string ImplicitlyNotEditable1 { get; } = "read only &s disabled by default";

        public string ImplicitlyNotEditable2 => "same as above";

        public string ImplicitlyNotEditable3 { get; init; } = "read only & disabled by default";

        [Editable(false)]
        public string ExplicitlyNotEditable { get; set; } = "not editable, even with setter";

        // this will be ignored
        [NotMapped]
        public string NotMapped { get; set; } = "this property will not show up in the form";

        [Display(Name = "name", Description = "description")]
        public string PropertyWithNameAndDescription { get; set; } = "name and description";

        [DisplayName("multi choice select")]
        public Choices EnumChoice1 { get; set; }

        [DisplayName("multi choice select with default value")]
        public Choices EnumChoice2 { get; set; } = Choices.ChoiceC;

        [DisplayName("text with empty placeholder")]
        [Placeholder]
        public string TextWithPlaceholder { get; set; } = string.Empty;

        [DisplayName("text with placeholder")]
        [Placeholder("please enter your credit card information :3")]
        [Description("please dont actually tho...")]
        public string TextWithPlaceholder2 { get; set; } = string.Empty;

        [DataList("items")]
        [DisplayName("text with datalist")]
        [Description("make sure to write a FluentValidation rule to ensure that the value is within the list")]
        public string TextWithDataList { get; set; } = string.Empty;

        [Range(0, 10)]
        public int IntRangeFromOneToTen { get; set; } = 5;

        [Range(0, 10)]
        public decimal DecimalRangeFromOneToTen { get; set; } = 5m;

        public DateTime SimpleDateTime { get; set; }

        [DataType(DataType.DateTime)]
        public DateTime DateAndTime { get; set; }

        [DataType(DataType.Date)]
        public DateTime DateOnly { get; set; }

        [Range(typeof(string), "2023-01-01", "2023-12-01")]
        [DataType(DataType.Date)]
        public DateTime ConstrainedDateOnly { get; set; }

        [DataList("dates")]
        [DataType(DataType.Date)]
        public DateTime ConstrainedDateOnlyWithDataList { get; set; }

        [DataType(DataType.Time)]
        // TODO give warning, tell user to use string.
        public DateTime TimeOnly { get; set; }

        public DateOnly DateOnlyField { get; set; }

        public TimeOnly TimeOnlyField { get; set; }

        [DataType(DataType.EmailAddress)]
        public string Email { get; set; } = string.Empty;

        [DataType(DataType.Password)]
        public string Password { get; set; } = string.Empty;

        [DataType(DataType.PhoneNumber)]
        public string PhoneNumber { get; set; } = string.Empty;

        [DataType(DataType.Url)]
        public string Url { get; set; } = string.Empty;

        [DataType(DataType.ImageUrl)]
        public string ImageUrl { get; set; } = string.Empty;

        // DataType.MultilineText => null
        [DataType(DataType.MultilineText)]
        public string LongText { get; set; } = string.Empty;
    }

    private void OnValidSubmit(EditContext editContext)
    {
    // reset the value or something here.
        Console.WriteLine("Form submitted");
    }

    private void OnInvalidSubmit(EditContext editContext)
    {
        editContext.Validate();
        Console.WriteLine("Form invalid");
    }

}