@inherits BaseTest

@code
{
    [SuppressMessage("ReSharper", "UnusedMember.Local")]
    private enum Enum
    {
        Value1,
        Value2
    }

    [SuppressMessage("ReSharper", "UnusedMember.Local")]
    private class Model
    {
        public string A { get; set; } = default!;

        public bool B { get; set; }

        public int C { get; set; }

        public DateTime D { get; set; }

        public DateTimeOffset E { get; set; }

        public DateOnly F { get; set; }

        public TimeOnly G { get; set; }

        public Enum H { get; set; }
    }

    [Test]
    public void Test()
    {
        var model = new Model();

        var cut = Render(
            @<text>
                 <QuickForm Model="model">
                     @context.InputComponent(string.Empty)
                 </QuickForm>
             </text>);

        cut.MarkupMatches(
            @<text>
                 <form diff:ignoreAttributes>
                     <input autofocus diff:ignoreAttributes/>
                     <input autofocus role="switch" type="checkbox" diff:ignoreAttributes/>
                     <input autofocus step="any" type="number" value="0" diff:ignoreAttributes/>
                     <input autofocus type="datetime-local" value="0001-01-01T00:00:00" diff:ignoreAttributes/>
                     <input autofocus type="datetime-local" value="0001-01-01T00:00:00" diff:ignoreAttributes/>
                     <input autofocus type="date" value="0001-01-01" diff:ignoreAttributes/>
                     <input autofocus type="time" value="00:00:00" diff:ignoreAttributes/>
                     <select autofocus value:regex="[a-zA-Z0-9]+" diff:ignoreAttributes>
                         <option value:regex="[a-zA-Z0-9]+" diff:ignoreAttributes diff:ignoreChildren>Value1</option>
                         <option value:regex="[a-zA-Z0-9]+" diff:ignoreAttributes diff:ignoreChildren>Value2</option>
                     </select>
                 </form>
             </text>);

        Print(cut);
    }
}